version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ezpark-network
    healthcheck:
      test: [ "CMD-SHELL", "echo 'ruok' | nc localhost 2181 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - ezpark-network
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server localhost:29092 --list" ]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 20s

  postgres:
    image: postgres:13-alpine
    container_name: postgres-db
    environment:
      POSTGRES_DB: ezpark_db_master
      POSTGRES_USER: ${USER_POSTGRESQL}
      POSTGRES_PASSWORD: ${PASSWORD_POSTGRESQL}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d # OJO: Necesitarás subir esta carpeta al servidor.
    networks:
      - ezpark-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${USER_POSTGRESQL} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  config-server:
    image: amnerls/config-server:1.0
    container_name: config-server
    environment:
      GIT_USERNAME: ${GIT_USERNAME}
      GIT_PASSWORD: ${GIT_PASSWORD}
    networks:
      - ezpark-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8888/actuator/health || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  discovery-server:
    image: amnerls/discovery-server:1.0
    container_name: discovery-server
    depends_on:
      config-server:
        condition: service_healthy
    environment:
      GIT_USERNAME: ${GIT_USERNAME}
      GIT_PASSWORD: ${GIT_PASSWORD}
    networks:
      - ezpark-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s


  api-gateway:
    image: amnerls/api-gateway:1.0
    container_name: api-gateway
    ports:
      - "80:8080"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    environment:
      GATEWAY_SECRET: ${GATEWAY_SECRET}
      JWT_SECRET: ${JWT_SECRET}
    networks:
      - ezpark-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 90s

  # El patrón para los demás servicios es el mismo:
  # - Usar 'image:'
  # - Eliminar 'ports:'
  # - Mantener 'depends_on:', 'environment:', 'networks:' y 'healthcheck:'

  iam-service:
    image: amnerls/iam-service:1.0
    container_name: iam-service
    depends_on:
      config-server: { condition: service_healthy }
      discovery-server: { condition: service_healthy }
      postgres: { condition: service_healthy }
      kafka: { condition: service_healthy }
    environment:
      USER_POSTGRESQL: ${USER_POSTGRESQL}
      PASSWORD_POSTGRESQL: ${PASSWORD_POSTGRESQL}
    networks:
      - ezpark-network
    healthcheck: { test: ["CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1"], interval: 10s, timeout: 5s, retries: 5, start_period: 90s }

  vehicle-service:
    image: amnerls/vehicle-service:1.0
    container_name: vehicle-service
    depends_on:
      config-server: { condition: service_healthy }
      discovery-server: { condition: service_healthy }
      postgres: { condition: service_healthy }
      kafka: { condition: service_healthy }
    environment:
      USER_POSTGRESQL: ${USER_POSTGRESQL}
      PASSWORD_POSTGRESQL: ${PASSWORD_POSTGRESQL}
    networks: [ ezpark-network ]
    healthcheck: { test: ["CMD-SHELL", "curl -f http://localhost:8083/actuator/health || exit 1"], interval: 10s, timeout: 5s, retries: 5, start_period: 90s }

  profile-service:
    image: amnerls/profile-service:1.0
    container_name: profile-service
    depends_on:
      config-server: { condition: service_healthy }
      discovery-server: { condition: service_healthy }
      postgres: { condition: service_healthy }
      kafka: { condition: service_healthy }
    environment:
      USER_POSTGRESQL: ${USER_POSTGRESQL}
      PASSWORD_POSTGRESQL: ${PASSWORD_POSTGRESQL}
    networks: [ ezpark-network ]
    healthcheck: { test: ["CMD-SHELL", "curl -f http://localhost:8082/actuator/health || exit 1"], interval: 10s, timeout: 5s, retries: 5, start_period: 90s }

  parking-service:
    image: amnerls/parking-service:1.0
    container_name: parking-service
    depends_on:
      config-server: { condition: service_healthy }
      discovery-server: { condition: service_healthy }
      postgres: { condition: service_healthy }
      kafka: { condition: service_healthy }
    environment:
      USER_POSTGRESQL: ${USER_POSTGRESQL}
      PASSWORD_POSTGRESQL: ${PASSWORD_POSTGRESQL}
    networks: [ ezpark-network ]
    healthcheck: { test: ["CMD-SHELL", "curl -f http://localhost:8084/actuator/health || exit 1"], interval: 10s, timeout: 5s, retries: 5, start_period: 90s }

  reservation-service:
    image: amnerls/reservation-service:1.0
    container_name: reservation-service
    depends_on:
      config-server: { condition: service_healthy }
      discovery-server: { condition: service_healthy }
      postgres: { condition: service_healthy }
      kafka: { condition: service_healthy }
    environment:
      USER_POSTGRESQL: ${USER_POSTGRESQL}
      PASSWORD_POSTGRESQL: ${PASSWORD_POSTGRESQL}
    networks: [ ezpark-network ]
    healthcheck: { test: ["CMD-SHELL", "curl -f http://localhost:8085/actuator/health || exit 1"], interval: 10s, timeout: 5s, retries: 5, start_period: 90s }

  payment-service:
    image: amnerls/payment-service:1.0
    container_name: payment-service
    depends_on:
      config-server: { condition: service_healthy }
      discovery-server: { condition: service_healthy }
      postgres: { condition: service_healthy }
      kafka: { condition: service_healthy }
    environment:
      USER_POSTGRESQL: ${USER_POSTGRESQL}
      PASSWORD_POSTGRESQL: ${PASSWORD_POSTGRESQL}
    networks: [ ezpark-network ]
    healthcheck: { test: ["CMD-SHELL", "curl -f http://localhost:8086/actuator/health || exit 1"], interval: 10s, timeout: 5s, retries: 5, start_period: 90s }

  review-service:
    image: amnerls/review-service:1.0
    container_name: review-service
    depends_on:
      config-server: { condition: service_healthy }
      discovery-server: { condition: service_healthy }
      postgres: { condition: service_healthy }
      kafka: { condition: service_healthy }
    environment:
      USER_POSTGRESQL: ${USER_POSTGRESQL}
      PASSWORD_POSTGRESQL: ${PASSWORD_POSTGRESQL}
    networks: [ ezpark-network ]
    healthcheck: { test: ["CMD-SHELL", "curl -f http://localhost:8087/actuator/health || exit 1"], interval: 10s, timeout: 5s, retries: 5, start_period: 90s }

  notification-service:
    image: amnerls/notification-service:1.0
    container_name: notification-service
    depends_on:
      config-server: { condition: service_healthy }
      discovery-server: { condition: service_healthy }
      postgres: { condition: service_healthy }
      kafka: { condition: service_healthy }
    environment:
      USER_POSTGRESQL: ${USER_POSTGRESQL}
      PASSWORD_POSTGRESQL: ${PASSWORD_POSTGRESQL}
    networks: [ ezpark-network ]
    healthcheck: { test: ["CMD-SHELL", "curl -f http://localhost:8088/actuator/health || exit 1"], interval: 10s, timeout: 5s, retries: 5, start_period: 90s }

# ----------------------------------------------------
# VOLÚMENES Y REDES
# ----------------------------------------------------
volumes:
  postgres-data:

networks:
  ezpark-network:
    driver: bridge
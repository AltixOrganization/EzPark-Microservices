version: '3.8'

services:
  # ----------------------------------------------------
  # INFRAESTRUCTURA BASE (Zookeeper y Kafka - existentes)
  # ----------------------------------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ezpark-network
    healthcheck:
      test: ["CMD", "sh", "-c", "echo stat | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - ezpark-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:29092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # ----------------------------------------------------
  # BASE DE DATOS (PostgreSQL)
  # ----------------------------------------------------
  postgres:
    image: postgres:13-alpine
    container_name: postgres-db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ezpark_db_master
      POSTGRES_USER: ${USER_POSTGRESQL}
      POSTGRES_PASSWORD: ${PASSWORD_POSTGRESQL}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    networks:
      - ezpark-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${USER_POSTGRESQL}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # ----------------------------------------------------
  # SERVICIOS DE GESTIÓN (Config Server, Discovery Server)
  # **ORDEN IMPORTANTE AQUÍ**
  # ----------------------------------------------------
  config-server:
    build: ./config-server
    container_name: config-server
    ports:
      - "8888:8888"
    environment:
      GIT_USERNAME: ${GIT_USERNAME}
      GIT_PASSWORD: ${GIT_PASSWORD}

    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8888/actuator/health || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

    networks:
      - ezpark-network

  discovery-server:
    build: ./discovery-server
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      GIT_USERNAME: ${GIT_USERNAME}
      GIT_PASSWORD: ${GIT_PASSWORD}

    networks:
      - ezpark-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  # ----------------------------------------------------
  # MICROSERVICIOS DE LA APLICACIÓN (API Gateway, IAM, etc.)
  # ----------------------------------------------------
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    environment:
      GATEWAY_SECRET: ${GATEWAY_SECRET}
      JWT_SECRET: ${JWT_SECRET}

    networks:
      - ezpark-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 90s

  iam-service:
    build: ./iam-service
    container_name: iam-service
    ports:
      - "8081:8081"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      USER_POSTGRESQL: ${USER_POSTGRESQL}
      PASSWORD_POSTGRESQL: ${PASSWORD_POSTGRESQL}
    networks:
      - ezpark-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 90s

  vehicle-service:
    build: ./vehicle-service
    container_name: vehicle-service
    ports:
      - "8083:8083"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      USER_POSTGRESQL: ${USER_POSTGRESQL}
      PASSWORD_POSTGRESQL: ${PASSWORD_POSTGRESQL}
    networks:
      - ezpark-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 90s

  profile-service:
    build: ./profile-service
    container_name: profile-service
    ports:
      - "8082:8082"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      USER_POSTGRESQL: ${USER_POSTGRESQL}
      PASSWORD_POSTGRESQL: ${PASSWORD_POSTGRESQL}
    networks:
      - ezpark-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 90s

  parking-service:
    build: ./parking-service
    container_name: parking-service
    ports:
      - "8084:8084"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      USER_POSTGRESQL: ${USER_POSTGRESQL}
      PASSWORD_POSTGRESQL: ${PASSWORD_POSTGRESQL}
    networks:
      - ezpark-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8084/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 90s

  reservation-service:
    build: ./reservation-service
    container_name: reservation-service
    ports:
      - "8085:8085"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      USER_POSTGRESQL: ${USER_POSTGRESQL}
      PASSWORD_POSTGRESQL: ${PASSWORD_POSTGRESQL}
    networks:
      - ezpark-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8085/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 90s

  payment-service:
    build: ./payment-service
    container_name: payment-service
    ports:
      - "8086:8086"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      USER_POSTGRESQL: ${USER_POSTGRESQL}
      PASSWORD_POSTGRESQL: ${PASSWORD_POSTGRESQL}
    networks:
      - ezpark-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8086/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 90s

# ----------------------------------------------------
# VOLÚMENES Y REDES
# ----------------------------------------------------
volumes:
  postgres-data:

networks:
  ezpark-network:
    driver: bridge